# Copyright (c) 2014 The renderer authors. All rights
# reserved. Use of this source code is governed by a BSD-style license that
# can be found in the LICENSE file.

from subprocess import call


common_sources = '''
  renderer/common/initialize.cc
  renderer/common/render_handler.cc
'''

karma_sources = '''
  renderer/karma/app.cc
  renderer/karma/handler.cc
  renderer/karma/main.cc
'''

seo_sources = '''
  renderer/seo/app.cc
  renderer/seo/handler.cc
  renderer/seo/main.cc
  renderer/seo/request_handler.cc
'''

seo_generator_sources = '''
  seo-generator/main.cc
  proto/seo/request.pb.cc
'''

protobufs = '''
  proto/seo/request.proto
  proto/seo/response.proto
'''


call(['mkdir', '-p', '/renderer/obj'])
for proto in Split(protobufs):
  print 'Build', proto
  call(['protoc', '--cpp_out=/renderer/obj', '-I/renderer/src', '/renderer/src/' + proto])


libs = ['cef', 'cef_dll_wrapper', 'glog', 'gflags', 'protobuf']
flags = ['-Werror', '-Wall']
include_paths = ['#src', '/cef', '#obj']
lib_paths = ['/usr/local/lib', '/cef', '/cef/obj.target']


env = Environment()
env.ParseConfig('pkg-config --cflags --libs gtk+-2.0')
include_paths.append(env['CPPPATH'])


def create_objs(sources):
  return [env.Object(source, CPPPATH=include_paths, CPPFLAGS=flags) for source in Split(sources)]


common_objs = create_objs(common_sources)

karma_objs = common_objs + create_objs(karma_sources)
env.Program('#bin/karma', karma_objs, LIBS=libs, LIBPATH=lib_paths)

seo_objs = common_objs + create_objs(seo_sources)
env.Program('#bin/seo', seo_objs, LIBS=libs, LIBPATH=lib_paths)

seo_generator_objs = common_objs + create_objs(seo_generator_sources)
env.Program('#bin/seo-generator', seo_generator_objs, LIBS=libs, LIBPATH=lib_paths)
